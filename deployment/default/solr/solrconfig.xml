<?xml version="1.0" encoding="UTF-8"?>
    <!--
        Solr Configuration for FluidDB. This file is based on the
        example configuration file provided in the standard Solr
        distribution
    -->
<config>
    <!--
        Set this to 'false' if you want solr to continue working after
        it has encountered an severe configuration error. In a
        production environment, you may want solr to keep working even
        if one handler is mis-configured. You may also set this to false
        using by setting the system property:
        -Dsolr.abortOnConfigurationError=false
    -->
    <abortOnConfigurationError>true</abortOnConfigurationError>
    <!--
        Used to specify an alternate directory to hold all index data
        other than the default ./data under the Solr home. If
        replication is in use, this should match the replication
        configuration.
    -->
    <dataDir>/var/lib/solr/data</dataDir>
    <!--
        WARNING: this <indexDefaults> section only provides defaults for
        index writers in general. See also the <mainIndex> section after
        that when changing parameters for Solr's main Lucene index.
    -->
    <indexDefaults>
        <!--
            Values here affect all index writers and act as a default
            unless overridden.
        -->
        <useCompoundFile>false</useCompoundFile>
        <mergeFactor>10</mergeFactor>
        <!--
            Sets the amount of RAM that may be used by Lucene indexing
            for buffering added documents and deletions before they are
            flushed to the Directory.
        -->
        <ramBufferSizeMB>32</ramBufferSizeMB>
        <maxFieldLength>10000</maxFieldLength>
        <writeLockTimeout>1000</writeLockTimeout>
        <commitLockTimeout>10000</commitLockTimeout>
        <!--
            This option specifies which Lucene LockFactory
            implementation to use. single = SingleInstanceLockFactory -
            suggested for a read-only index or when there is no
            possibility of another process trying to modify the index.
            native = NativeFSLockFactory - uses OS native file locking
            simple = SimpleFSLockFactory - uses a plain file for locking
            (For backwards compatibility with Solr 1.2, 'simple' is the
            default if not specified.)
        -->
        <lockType>native</lockType>
    </indexDefaults>
    <mainIndex>
        <!-- options specific to the main on-disk lucene index -->
        <useCompoundFile>false</useCompoundFile>
        <ramBufferSizeMB>32</ramBufferSizeMB>
        <mergeFactor>10</mergeFactor>
        <!--
            If true, unlock any held write or commit locks on startup.
            This defeats the locking mechanism that allows multiple
            processes to safely access a lucene index, and should be
            used with care. This is not needed if lock type is 'none' or
            'single'
        -->
        <unlockOnStartup>false</unlockOnStartup>
        <!--
            If true, IndexReaders will be reopened (often more
            efficient) instead of closed and then opened.
        -->
        <reopenReaders>true</reopenReaders>
        <!--
            Custom deletion policies can specified here. The class must
            implement org.apache.lucene.index.IndexDeletionPolicy. The
            standard Solr IndexDeletionPolicy implementation supports
            deleting index commit points on number of commits, age of
            commit point and optimized status. The latest commit point
            should always be preserved regardless of the criteria.
        -->
        <deletionPolicy class="solr.SolrDeletionPolicy">
            <!-- The number of commit points to be kept -->
            <str name="maxCommitsToKeep">1</str>
            <!-- The number of optimized commit points to be kept -->
            <str name="maxOptimizedCommitsToKeep">0</str>
            <!--
                Delete all commit points once they have reached the
                given age. Supports DateMathParser syntax e.g. <str
                name="maxCommitAge">30MINUTES</str> <str
                name="maxCommitAge">1DAY</str>
            -->
        </deletionPolicy>
        <!--
            To aid in advanced debugging, you may turn on IndexWriter
            debug logging. Setting to true will set the file that the
            underlying Lucene IndexWriter will write its debug
            infostream to.
        -->
        <infoStream file="INFOSTREAM.txt">false</infoStream>
    </mainIndex>

    <!-- the default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2" />

    <query>
        <!--
            Maximum number of clauses in a boolean query... in the past,
            this affected range or prefix queries that expanded to big
            boolean queries - built in Solr query parsers no longer
            create queries with this limitation. An exception is thrown
            if exceeded.
        -->
        <maxBooleanClauses>1024</maxBooleanClauses>
        <!--
            There are two implementations of cache available for Solr,
            LRUCache, based on a synchronized LinkedHashMap, and
            FastLRUCache, based on a ConcurrentHashMap. FastLRUCache has
            faster gets and slower puts in single threaded operation and
            thus is generally faster than LRUCache when the hit ratio of
            the cache is high (> 75%), and may be faster under other
            scenarios on multi-cpu systems.
        -->
        <!--
            Cache used by SolrIndexSearcher for filters (DocSets),
            unordered sets of *all* documents that match a query. When a
            new searcher is opened, its caches may be prepopulated or
            "autowarmed" using data from caches in the old searcher.
            autowarmCount is the number of items to prepopulate. For
            LRUCache, the autowarmed items will be the most recently
            accessed items. Parameters: class - the SolrCache
            implementation LRUCache or FastLRUCache size - the maximum
            number of entries in the cache initialSize - the initial
            capacity (number of entries) of the cache. (seel
            java.util.HashMap) autowarmCount - the number of entries to
            prepopulate from and old cache.
        -->
        <filterCache class="solr.FastLRUCache" size="512"
            initialSize="512" autowarmCount="0" />
        <!--
            queryResultCache caches results of searches - ordered lists
            of document ids (DocList) based on a query, a sort, and the
            range of documents requested.
        -->
        <queryResultCache class="solr.LRUCache" size="512"
            initialSize="512" autowarmCount="0" />
        <!--
            documentCache caches Lucene Document objects (the stored
            fields for each document). Since Lucene internal document
            ids are transient, this cache will not be autowarmed.
        -->
        <documentCache class="solr.LRUCache" size="512"
            initialSize="512" autowarmCount="0" />
        <!--
            If true, stored fields that are not requested will be loaded
            lazily. This can result in a significant speed improvement
            if the usual case is to not load all stored fields,
            especially if the skipped fields are large compressed text
            fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>
        <!--
            An optimization for use with the queryResultCache. When a
            search is requested, a superset of the requested number of
            document ids are collected. For example, if a search for a
            particular query requests matching documents 10 through 19,
            and queryWindowSize is 50, then documents 0 through 49 will
            be collected and cached. Any further requests in that range
            can be satisfied via the cache.
        -->
        <queryResultWindowSize>20</queryResultWindowSize>
        <!--
            Maximum number of documents to cache for any entry in the
            queryResultCache.
        -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>
        <!--
            If a search request comes in and there is no current
            registered searcher, then immediately register the still
            warming searcher and use it. If "false" then all requests
            will block until the first searcher is done warming.
        -->
        <useColdSearcher>false</useColdSearcher>
        <!--
            Maximum number of searchers that may be warming in the
            background concurrently. An error is returned if this limit
            is exceeded. Recommend 1-2 for read-only slaves, higher for
            masters w/o cache warming.
        -->
        <!--
            We increase this to 8 from 2 (the default value) to support
            frequent commits. This needs a rethought, but for the time being
            it works and makes real time indexing possible.
        -->
        <maxWarmingSearchers>8</maxWarmingSearchers>
    </query>
    <!--
        Let the dispatch filter handler /select?qt=XXX handleSelect=true
        will use consistent error handling for /select and /update
        handleSelect=false will use solr1.1 style error formatting
    -->
    <requestDispatcher handleSelect="true">
        <!--
            Make sure your system has some authentication before
            enabling remote streaming!
        -->
        <requestParsers enableRemoteStreaming="true"
            multipartUploadLimitInKB="2048000" />
        <!--
            Set HTTP caching related parameters (for proxy caches and
            clients). To get the behaviour of Solr 1.2 (ie: no caching
            related headers) use the never304="true" option and do not
            specify a value for <cacheControl>
        -->
        <!-- <httpCaching never304="true"> -->
        <httpCaching lastModifiedFrom="openTime" etagSeed="Solr">
        </httpCaching>
    </requestDispatcher>
    <!--
        requestHandler plugins... incoming queries will be dispatched to
        the correct handler based on the path or the qt (query type)
        param. Names starting with a '/' are accessed with the a path
        equal to the registered name. Names without a leading '/' are
        accessed with: http://host/app/select?qt=name If no qt is
        defined, the requestHandler that declares default="true" will be
        used.
    -->
    <requestHandler name="standard" class="solr.SearchHandler"
        default="true">
        <!-- default values for query parameters -->
        <lst name="defaults">
            <str name="echoParams">explicit</str>
        </lst>
    </requestHandler>
    <!--
        Update request handler. Note: Since solr1.1 requestHandlers
        requires a valid content type header if posted in the body. For
        example, curl now requires: -H 'Content-type:text/xml;
        charset=utf-8' The response format differs from solr1.1
        formatting and returns a standard error code. To enable solr1.1
        behavior, remove the /update handler or change its path
    -->
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />
    <!--
        Admin Handlers - This will register all the standard admin
        RequestHandlers. Adding this single handler is equivalent to
        registering: <requestHandler name="/admin/luke"
        class="org.apache.solr.handler.admin.LukeRequestHandler" />
        <requestHandler name="/admin/system"
        class="org.apache.solr.handler.admin.SystemInfoHandler" />
        <requestHandler name="/admin/plugins"
        class="org.apache.solr.handler.admin.PluginInfoHandler" />
        <requestHandler name="/admin/threads"
        class="org.apache.solr.handler.admin.ThreadDumpHandler" />
        <requestHandler name="/admin/properties"
        class="org.apache.solr.handler.admin.PropertiesRequestHandler"
        /> <requestHandler name="/admin/file"
        class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
        If you wish to hide files under ${solr.home}/conf, explicitly
        register the ShowFileRequestHandler using: <requestHandler
        name="/admin/file"
        class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
        <lst name="invariants"> <str name="hidden">synonyms.txt</str>
        <str name="hidden">anotherfile.txt</str> </lst>
        </requestHandler>
    -->
    <requestHandler name="/admin/"
        class="org.apache.solr.handler.admin.AdminHandlers" />

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="PingRequestHandler">
        <lst name="defaults">
            <str name="qt">standard</str>
            <str name="q">solrpingquery</str>
            <str name="echoParams">all</str>
        </lst>
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- DataImportHandler for bulk imports from the database -->
    <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
        <lst name="defaults">
            <str name="config">/etc/solr/conf/data-config.xml</str>
        </lst>
    </requestHandler>

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
    </admin>
</config>
