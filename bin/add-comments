#!/usr/bin/env python

"""Create comments from sample data.

You need to do two things to use this script:

1. Create a CSV file containing your sample data, matching the following
   format::

     username,2011-05-16T12:23:34.572,about-value,comment-text

2. Use the manual user creation logic at https://fluidinfo.com/accounts/new/
   to create sample users with passwords.  Use http://gravatar.com to setup
   and manage avatars for them.

3. Edit the C{USERS} constant below with a mapping of usernames and passwords.
   If any of the usernames mentioned in your CSV file are not in the mapping
   the script will blow up.
"""

from csv import reader
from json import dumps, loads
import sys

from requests import post


API_URL = 'http://fluiddb.example.com/jsonrpc'
USERS = {'username': 'password'}


class RequestError(Exception):
    """Raised when a request fails."""


class JSONRPCError(Exception):
    """Raised when an error occurs invoking a JSONRPC method."""

    def __init__(self, code, message):
        super(JSONRPCError, self).__init__(message)
        self.code = code


class JSONRPCMethod(object):
    """A JSON-RPC method.

    @param url: The URL of the JSON-RPC API to invoke the method on.
    @param method: The name of the method.
    """

    def __init__(self, client, method):
        self._client = client
        self._method = method

    def __call__(self, **kwargs):
        """Invoke the method.

        @param kwargs: The named parameters to pass to the method.
        @return: The result of the method invocation.
        """
        return self._client.post(self._method, kwargs)


class JSONRPCClient(object):
    """A JSON-RPC client.

    @param url: The URL of the JSON-RPC API to invoke methods on.
    """

    def __init__(self, url, username, password):
        self._url = url
        self._username = username
        self._password = password

    def __getattr__(self, method):
        """Find a method to run.

        @param method: The name of the method to invoke.
        @return: A L{JSONRPCMethod} instance that can be invoked to make a
            request to the server.
        """
        return JSONRPCMethod(self, method)

    def post(self, method, parameters):
        """Invoke a JSON-RPC method.

        @param method: The name of the method to invoke.
        @param parameters: A C{dict} of named parameters to pass.
        @raise JSONRPCError: Raised when a method returns an error result.
        @raise RequestError: Raised when a request responds with a non-200
            status code.
        @return: The result of the method invocation.
        """
        data = {'id': 1, 'jsonrpc': '2.0', 'method': method,
                'params': parameters}
        headers = {'content-type': 'application/json'}
        response = post(self._url, data=dumps(data), headers=headers,
                        auth=(self._username, self._password))
        if response.status_code != 200:
            raise RequestError('%s\n\n%s' % (response.headers,
                                             response.content))
        result = loads(response.content)
        error = result.get('error')
        if error:
            raise JSONRPCError(error['code'], error['message'])
        return result['result']


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print 'Usage: add-comment.py FILE'
        print
        print __doc__.strip()
        sys.exit()

    with open(sys.argv[1], 'rb') as file:
        for (username, creationTime, about, comment) in reader(file):
            password = USERS[username]
            api = JSONRPCClient(API_URL, username, password)
            api.addComment(text=comment, about=about,
                           creationTime=creationTime)
            print "Added comment by %s about '%s' on %s: %s" % (
                username, about, creationTime, comment)
    print 'DONE'
